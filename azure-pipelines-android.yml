# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  - master
  - dev

pool:
  vmImage: macOS-11

variables:
  scheme: "Artsorakel"
  sdk: "iphoneos"
  configuration: "Release"
  system.debug: true

steps:
  - task: JavaToolInstaller@0
    inputs:
      versionSpec: "11"
      jdkArchitectureOption: "x64"
      jdkSourceOption: "PreInstalled"
  # - task: InstallAppleCertificate@2
  #   inputs:
  #     certSecureFile: 'artsorakel.p12'
  #     certPwd: $(appCertificatePassword)
  #     keychain: 'temp'
  #     deleteCert: true

  # - task: InstallAppleProvisioningProfile@1
  #   inputs:
  #     provProfileSecureFile: 'ArtsorakelNewProvisionProfile.mobileprovision'
  #     removeProfile: true

  # - task: DownloadSecureFile@1
  #   inputs:
  #     secureFile: 'fonts.zip'
  # - task: DownloadSecureFile@1
  #   inputs:
  #     secureFile: 'build.json'
  #   displayName: 'npm install and copy keystore'

  - task: DownloadSecureFile@1
    inputs:
      secureFile: "orakel_keystore.jks"
  # - task: ExtractFiles@1
  #   inputs:
  #     archiveFilePatterns: '/Users/runner/work/_temp/fonts.zip'
  #     destinationFolder: 'src'
  #     cleanDestinationFolder: false
  #     overwriteExistingFiles: true
  - task: NodeTool@0
    inputs:
      versionSpec: "18.14"
    displayName: "Install Node.js"

  # Cache v2
  # Cache files between runs.
  - task: Cache@2
    inputs:
      key: nodemodules # string. Required. Key.
      path: node_modules # string. Required. Path.
    displayName: "Cache node modules"

  - script: |
      npm install
      cd android
      cp /Users/runner/work/_temp/build.json .
      cp /Users/runner/work/_temp/orakel_keystore.jks ./app/
      echo $(KEYSTOREALIAS)
    #   npx react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res/
    #    cp /Users/runner/Library/Android/sdk/build-tools/32.0.0/d8 /Users/runner/Library/Android/sdk/build-tools/32.0.0/dx
    #    cp /Users/runner/Library/Android/sdk/build-tools/32.0.0/lib/d8.jar /Users/runner/Library/Android/sdk/build-tools/32.0.0/lib/dx.jar
    #    cp /Users/runner/Library/Android/sdk/build-tools/33.0.1/d8 /Users/runner/Library/Android/sdk/build-tools/33.0.1/dx
    #    cp /Users/runner/Library/Android/sdk/build-tools/33.0.1/lib/d8.jar /Users/runner/Library/Android/sdk/build-tools/33.0.1/lib/dx.jar
    #    ./gradlew bundleRelease
    #    # cp /Users/runner/Library/Android/sdk/build-tools/32.0.0/d8 /Users/runner/Library/Android/sdk/build-tools/32.0.0/dx
    #    # cp /Users/runner/Library/Android/sdk/build-tools/32.0.0/lib/d8.jar /Users/runner/Library/Android/sdk/build-tools/32.0.0/lib/dx.jar
    #    # cp /Users/runner/Library/Android/sdk/build-tools/33.0.1/d8 /Users/runner/Library/Android/sdk/build-tools/33.0.1/dx
    #    # cp /Users/runner/Library/Android/sdk/build-tools/33.0.1/lib/d8.jar /Users/runner/Library/Android/sdk/build-tools/33.0.1/lib/dx.jar
    displayName: "npm install and copy keystore"

  - task: Gradle@2
    inputs:
      workingDirectory: "android"
      gradleWrapperFile: "android/gradlew"
      gradleOptions: "-Xmx3072m"
      publishJUnitResults: false
      testResultsFiles: "**/TEST-*.xml"
      tasks: "bundleRelease"
    displayName: Build .aab file
    env:
      JARSIGNERKEYSTOREPASSWORD: $(jarsignerKeystorePassword)
      KEYSTOREALIAS: $(keystoreAlias)
      JARSIGNERKEYPASSWORD: $(jarsignerKeyPassword)

  # - task: AndroidSigning@2
  #   inputs:
  #      apkFiles: 'android/app/build/outputs/**/*.aab'
  #      jarsign: true
  #      jarsignerKeystoreFile: 'orakel_keystore.jks'
  #      jarsignerKeystorePassword: '$(jarsignerKeystorePassword)'
  #      jarsignerKeystoreAlias: '$(keystoreAlias)'
  #      jarsignerKeyPassword: '$(jarsignerKeyPassword)'
  #      jarsignerArguments: '-sigalg SHA256withRSA -digestalg SHA-256'
  #      zipalign: true
  #   displayName: Sign .aab files

  - task: CopyFiles@2
    inputs:
      contents: "android/app/build/outputs/**/*.aab"
      targetFolder: "$(build.artifactStagingDirectory)"
    displayName: Copy .aab files to artifact staging directory

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: "$(build.artifactStagingDirectory)"
      artifactName: "drop"
      artifactType: "container"
    displayName: Publish Android artifacts
